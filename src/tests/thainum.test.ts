import { thaiDigits, digitNames, unitNames, baht, text } from "..";

const test = (func: (n: any) => string, v: string | number, t: string) => {
  it(`should return ${t} for ${v}`, () => {
    expect(func(v)).toBe(t);
  });
}

describe('Thai Text', () => {
  const check = (v: string | number, t: string) => test(text, v, t);

  describe('Empty string', () => {
    it('should return empty string', () => {
      for (const v of ['', '.', '-', '--', '-.', '--.']) {
        expect(text(v)).toBe('');
      }
    });
  });

  describe('Zeros', () => {
    it(`should return ${digitNames[0]} for zero`, () => {
      expect(text('0')).toBe('ศูนย์');
    });

    it(`should return ${digitNames[0]} for minus zero`, () => {
      expect(text('-0')).toBe('ศูนย์');
    });

    for (let i = 1; i <= 6; i++) {
      check('0'.repeat(i), digitNames[0]);
    }
  });

  describe('Digits', () => {
    for (let i = 0; i <= 9; i++) {
      check(i, digitNames[i]);
    }

    for (let i = 1; i <= 9; i++) {
      check(-i, 'ลบ' + digitNames[i]);
    }

    for (let i = 0; i <= 9; i++) {
      check(thaiDigits[i], digitNames[i]);
    }
  });

  describe('Leading Zeros', () => {
    for (let i = 1; i <= 9; i++) {
      check(`0${i}`, digitNames[i]);
    }

    for (let i = 1; i <= 9; i++) {
      check(`00${i}`, digitNames[i]);
    }

    for (let i = 1; i <= 9; i++) {
      check(`-00${i}`, 'ลบ' + digitNames[i]);
    }
  });

  describe('Specific readings', () => {
    check(10, 'สิบ');
    check(11, 'สิบเอ็ด');
    check(12, 'สิบสอง');
    check(20, 'ยี่สิบ');
    check(21, 'ยี่สิบเอ็ด');
    check(22, 'ยี่สิบสอง');
    check(101, 'หนึ่งร้อยหนึ่ง');
    check(102, 'หนึ่งร้อยสอง');
    check(110, 'หนึ่งร้อยสิบ');
    check(111, 'หนึ่งร้อยสิบเอ็ด');
    check(112, 'หนึ่งร้อยสิบสอง');
    check(120, 'หนึ่งร้อยยี่สิบ');
    check(121, 'หนึ่งร้อยยี่สิบเอ็ด');
    check(122, 'หนึ่งร้อยยี่สิบสอง');
  });

  describe('Units', () => {
    [2, 3, 4, 5, 6].forEach(i => {
      const unit = `${digitNames[1]}${unitNames[i]}`;
      const v = Math.pow(10, i);

      check(v, unit);
    });
  });

  describe('Fractions', () => {
    check('.01', 'ศูนย์จุดศูนย์หนึ่ง');
    check('.1', 'ศูนย์จุดหนึ่ง');
    check('.10', 'ศูนย์จุดหนึ่ง');
    check('.11', 'ศูนย์จุดหนึ่งหนึ่ง');
    check('.12', 'ศูนย์จุดหนึ่งสอง');
    check('.2', 'ศูนย์จุดสอง');
    check('.21', 'ศูนย์จุดสองหนึ่ง');
    check('.22', 'ศูนย์จุดสองสอง');
    check('.123', 'ศูนย์จุดหนึ่งสองสาม');
    check('0.123', 'ศูนย์จุดหนึ่งสองสาม');
    check('-0.123', 'ลบศูนย์จุดหนึ่งสองสาม');
    check('-.123', 'ลบศูนย์จุดหนึ่งสองสาม');
  });

  describe('Trailing zero on fraction', () => {
    check('-1.01', 'ลบหนึ่งจุดศูนย์หนึ่ง');
    check('-1.010', 'ลบหนึ่งจุดศูนย์หนึ่ง');
    check('-.0100', 'ลบศูนย์จุดศูนย์หนึ่ง');
    check('-0.0100', 'ลบศูนย์จุดศูนย์หนึ่ง');
  });

  describe('With commas', () => {
    check('1,000', 'หนึ่งพัน');
    check('1,,,00,,,,0', 'หนึ่งพัน');
    check('1,,,00,,,,0.987', 'หนึ่งพันจุดเก้าแปดเจ็ด');
  });

  describe('With unrecognize characters', () => {
    check('1/00_0', 'หนึ่งพัน');
    check('1/(00)[]0$', 'หนึ่งพัน');
    check('-1/(00)[]0$', 'ลบหนึ่งพัน');
    check('-1/(00)[]0-$', 'ลบหนึ่งพัน');
    check('-1/(00)[]0-.12$', 'ลบหนึ่งพันจุดหนึ่งสอง');
  });

  describe('Very large number', () => {
    check('4,321,112,233,445,566,778,899', 'สี่พันสามร้อยยี่สิบเอ็ดล้านหนึ่งแสนหนึ่งหมื่นสองพันสองร้อยสามสิบสามล้านสี่แสนสี่หมื่นห้าพันห้าร้อยหกสิบหกล้านเจ็ดแสนเจ็ดหมื่นแปดพันแปดร้อยเก้าสิบเก้า')
    check('123,456,789,987,654,321,112,233,445,566,778,899', 'หนึ่งแสนสองหมื่นสามพันสี่ร้อยห้าสิบหกล้านเจ็ดแสนแปดหมื่นเก้าพันเก้าร้อยแปดสิบเจ็ดล้านหกแสนห้าหมื่นสี่พันสามร้อยยี่สิบเอ็ดล้านหนึ่งแสนหนึ่งหมื่นสองพันสองร้อยสามสิบสามล้านสี่แสนสี่หมื่นห้าพันห้าร้อยหกสิบหกล้านเจ็ดแสนเจ็ดหมื่นแปดพันแปดร้อยเก้าสิบเก้า');
  });
});

describe('Thai Baht', () => {
  const check = (v: string | number, t: string) => test(baht, v, t);

  describe('Whole', () => {
    check('0', 'ศูนย์บาทถ้วน');
    check('00', 'ศูนย์บาทถ้วน');
    check('-0', 'ศูนย์บาทถ้วน');
    check('1', 'หนึ่งบาทถ้วน');
    check('1.0', 'หนึ่งบาทถ้วน');
    check('2', 'สองบาทถ้วน');
    check('2.0', 'สองบาทถ้วน');
    check('10', 'สิบบาทถ้วน');
    check('11', 'สิบเอ็ดบาทถ้วน');
    check('20', 'ยี่สิบบาทถ้วน');
    check('21', 'ยี่สิบเอ็ดบาทถ้วน');
    check('-1', 'ลบหนึ่งบาทถ้วน');
    check('-2', 'ลบสองบาทถ้วน');
    check('-10', 'ลบสิบบาทถ้วน');
    check('-11', 'ลบสิบเอ็ดบาทถ้วน');
    check('-20', 'ลบยี่สิบบาทถ้วน');
    check('-21', 'ลบยี่สิบเอ็ดบาทถ้วน');

    [3, 4, 5, 6].forEach(i => {
      const unit = `${digitNames[1]}${unitNames[i]}`;
      const v = Math.pow(10, i);

      check(v, `${unit}บาทถ้วน`);
      check(`${v}.00`, `${unit}บาทถ้วน`);
      check(`-${v}.00`, `ลบ${unit}บาทถ้วน`);
    });
  });

  describe('Stang Only', () => {
    check('.01', 'หนึ่งสตางค์');
    check('-.01', 'ลบหนึ่งสตางค์');
    check('0.01', 'หนึ่งสตางค์');
    check('0.010', 'หนึ่งสตางค์');
    check('0.02', 'สองสตางค์');
    check('0.1', 'สิบสตางค์');
    check('.1', 'สิบสตางค์');
    check('.10', 'สิบสตางค์');
    check('.100', 'สิบสตางค์');
    check('.11', 'สิบเอ็ดสตางค์');
    check('.111', 'สิบเอ็ดสตางค์');
    check('0.2', 'ยี่สิบสตางค์');
    check('.20', 'ยี่สิบสตางค์');
    check('.200', 'ยี่สิบสตางค์');
    check('0.21', 'ยี่สิบเอ็ดสตางค์');
    check('.21', 'ยี่สิบเอ็ดสตางค์');
    check('.211', 'ยี่สิบเอ็ดสตางค์');
    check('0.22', 'ยี่สิบสองสตางค์');
    check('.22', 'ยี่สิบสองสตางค์');
    check('.220', 'ยี่สิบสองสตางค์');
    check('0.221', 'ยี่สิบสองสตางค์');
    check('0.222', 'ยี่สิบสองสตางค์');
    check('0.225', 'ยี่สิบสามสตางค์');
    check('0.5', 'ห้าสิบสตางค์');
    check('.5', 'ห้าสิบสตางค์');
    check('.50', 'ห้าสิบสตางค์');
    check('.500', 'ห้าสิบสตางค์');
  });

  describe('Full Reading', () => {
    check('1.01', 'หนึ่งบาทหนึ่งสตางค์');
    check('1.1', 'หนึ่งบาทสิบสตางค์');
    check('1.10', 'หนึ่งบาทสิบสตางค์');
    check('1.11', 'หนึ่งบาทสิบเอ็ดสตางค์');
    check('1.12', 'หนึ่งบาทสิบสองสตางค์');
    check('1.124', 'หนึ่งบาทสิบสองสตางค์');
    check('1.125', 'หนึ่งบาทสิบสามสตางค์');
  });
});
